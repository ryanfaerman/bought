// Generated by CoffeeScript 1.3.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.Item = (function(_super) {

    __extends(Item, _super);

    Item.name = 'Item';

    function Item() {
      return Item.__super__.constructor.apply(this, arguments);
    }

    Item.prototype.defaults = {
      content: 'empty item...',
      done: false
    };

    Item.prototype.initialize = function() {
      return console.log('initialized item');
    };

    Item.prototype.toggle = function() {
      return this.save({
        done: !this.get('done')
      });
    };

    Item.prototype.clear = function() {
      return this.destroy();
    };

    return Item;

  })(Backbone.Model);

  window.ItemList = (function(_super) {

    __extends(ItemList, _super);

    ItemList.name = 'ItemList';

    function ItemList() {
      return ItemList.__super__.constructor.apply(this, arguments);
    }

    ItemList.prototype.model = Item;

    ItemList.prototype.localStorage = new Backbone.LocalStorage('bought2');

    ItemList.prototype.done = function() {
      return this.filter(function(item) {
        return item.get('done');
      });
    };

    ItemList.prototype.nextOrder = function() {
      if (!this.length) {
        return 1;
      }
      return this.last().get('order') + 1;
    };

    ItemList.prototype.comparator = function(item) {
      return item.get('order');
    };

    return ItemList;

  })(Backbone.Collection);

  window.Items = new ItemList;

  window.ItemView = (function(_super) {

    __extends(ItemView, _super);

    ItemView.name = 'ItemView';

    function ItemView() {
      this.render = __bind(this.render, this);
      return ItemView.__super__.constructor.apply(this, arguments);
    }

    ItemView.prototype.tagName = 'div';

    ItemView.prototype.template = _.template($('#item-template').html());

    ItemView.prototype.events = {
      'click .check': 'toggleDone'
    };

    ItemView.prototype.initialize = function() {
      this.model.bind('change', this.render);
      return this.model.bind('destroy', this.remove);
    };

    ItemView.prototype.render = function() {
      $(this.el).html(this.template(this.model.toJSON()));
      return this;
    };

    ItemView.prototype.toggleDone = function() {
      return this.model.toggle();
    };

    ItemView.prototype.clear = function() {
      return this.model.clear();
    };

    return ItemView;

  })(Backbone.View);

  window.AppView = (function(_super) {

    __extends(AppView, _super);

    AppView.name = 'AppView';

    function AppView() {
      this.clearCompleted = __bind(this.clearCompleted, this);

      this.createOnClick = __bind(this.createOnClick, this);

      this.createOnEnter = __bind(this.createOnEnter, this);

      this.addAll = __bind(this.addAll, this);

      this.addOne = __bind(this.addOne, this);

      this.render = __bind(this.render, this);
      return AppView.__super__.constructor.apply(this, arguments);
    }

    AppView.prototype.el = $('#boughtApp');

    AppView.prototype.events = {
      'keypress #new-item': 'createOnEnter',
      'click button.add': 'createOnClick',
      'click button.clear': 'clearCompleted'
    };

    AppView.prototype.initialize = function() {
      this.input = this.$('#new-item');
      Items.bind('add', this.addOne);
      Items.bind('reset', this.addAll);
      Items.bind('all', this.render);
      return Items.fetch();
    };

    AppView.prototype.render = function() {
      return console.log("rendered");
    };

    AppView.prototype.addOne = function(item) {
      var view;
      view = new ItemView({
        model: item
      });
      return this.$('#primary').append(view.render().el);
    };

    AppView.prototype.addAll = function() {
      return Items.each(this.addOne);
    };

    AppView.prototype.newAttributes = function() {
      return {
        content: this.input.val(),
        order: Items.nextOrder(),
        done: false
      };
    };

    AppView.prototype.createOnEnter = function(e) {
      if (e.keyCode !== 13) {
        return;
      }
      Items.create(this.newAttributes());
      return this.input.val('');
    };

    AppView.prototype.createOnClick = function(e) {
      console.log('hello');
      Items.create(this.newAttributes());
      return this.input.val('');
    };

    AppView.prototype.clearCompleted = function(e) {
      return _.each(Items.done(), function(item) {
        return item.clear();
      });
    };

    return AppView;

  })(Backbone.View);

  window.App = new AppView;

}).call(this);
